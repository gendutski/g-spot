// Code generated by MockGen. DO NOT EDIT.
// Source: prompter.go

// Package mock_dotenvgenerator is a generated GoMock package.
package mock_dotenvgenerator

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockPrompter is a mock of Prompter interface.
type MockPrompter struct {
	ctrl     *gomock.Controller
	recorder *MockPrompterMockRecorder
}

// MockPrompterMockRecorder is the mock recorder for MockPrompter.
type MockPrompterMockRecorder struct {
	mock *MockPrompter
}

// NewMockPrompter creates a new mock instance.
func NewMockPrompter(ctrl *gomock.Controller) *MockPrompter {
	mock := &MockPrompter{ctrl: ctrl}
	mock.recorder = &MockPrompterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPrompter) EXPECT() *MockPrompterMockRecorder {
	return m.recorder
}

// PromptPassword mocks base method.
func (m *MockPrompter) PromptPassword(prompt string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptPassword", prompt)
	ret0, _ := ret[0].(string)
	return ret0
}

// PromptPassword indicates an expected call of PromptPassword.
func (mr *MockPrompterMockRecorder) PromptPassword(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptPassword", reflect.TypeOf((*MockPrompter)(nil).PromptPassword), prompt)
}

// PromptString mocks base method.
func (m *MockPrompter) PromptString(prompt string) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "PromptString", prompt)
	ret0, _ := ret[0].(string)
	return ret0
}

// PromptString indicates an expected call of PromptString.
func (mr *MockPrompterMockRecorder) PromptString(prompt interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PromptString", reflect.TypeOf((*MockPrompter)(nil).PromptString), prompt)
}
